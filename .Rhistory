plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
library(audio)
library(readr)
library(tuneR)
adat<-load.wave("audio2020-08-18-08_00_01.wav")
# This is a stereo recording. Convert to mono for simplicity
y<-adat[1,] + adat[2,]
#path of file
file_audio_path <- "audio2020-08-18-08_00_01.wav"
#Read Files
train_audio = readWave(file_audio_path)
#Lets see the structure of the audio.
str(train_audio)
s1 <- train_audio@left
s1 <- s1 / 2^(train_audio@bit -1)
timeArray <- (10000:(960000)) / train_audio@samp.rate
#Plot the wave
plot(timeArray, s1[10000:960000], type='l', col='black', xlab='Time (ms)', ylab='Amplitude')
get.trajectory <- function(X.k,ts,acq.freq) {
N   <- length(ts)
i   <- complex(real = 0, imaginary = 1)
x.n <- rep(0,N)           # create vector to keep the trajectory
ks  <- 0:(length(X.k)-1)
for(n in 0:(N-1)) {       # compute each time point x_n based on freqs X.k
x.n[n+1] <- sum(X.k * exp(i*2*pi*ks*n/N)) / N
}
x.n * acq.freq
}
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
# Plot the i-th harmonic
# Xk: the frequencies computed by the FFt
#  i: which harmonic
# ts: the sampling time points
# acq.freq: the acquisition rate
plot.harmonic <- function(Xk, i, ts, acq.freq, color="red") {
Xk.h <- rep(0,length(Xk))
Xk.h[i+1] <- Xk[i+1] # i-th harmonic
harmonic.trajectory <- get.trajectory(Xk.h, ts, acq.freq=acq.freq)
points(ts, harmonic.trajectory, type="l", col=color)
}
X.k <- fft(timeArray)                   # get amount of each frequency k
time     <- 6                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
X.k
get.trajectory <- function(X.k,ts,acq.freq) {
N   <- length(ts)
i   <- complex(real = 0, imaginary = 1)
x.n <- rep(0,N)           # create vector to keep the trajectory
ks  <- 0:(length(X.k)-1)
for(n in 0:(N-1)) {       # compute each time point x_n based on freqs X.k
x.n[n+1] <- sum(X.k * exp(i*2*pi*ks*n/N)) / N
}
x.n * acq.freq
}
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
# Plot the i-th harmonic
# Xk: the frequencies computed by the FFt
#  i: which harmonic
# ts: the sampling time points
# acq.freq: the acquisition rate
plot.harmonic <- function(Xk, i, ts, acq.freq, color="red") {
Xk.h <- rep(0,length(Xk))
Xk.h[i+1] <- Xk[i+1] # i-th harmonic
harmonic.trajectory <- get.trajectory(Xk.h, ts, acq.freq=acq.freq)
points(ts, harmonic.trajectory, type="l", col=color)
}
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
install.packages("av")
library(av)
library(audio)
library(readr)
library(tuneR)
library(av)
s1 <- train_audio@left
s1 <- s1 / 2^(train_audio@bit -1)
timeArray <- (10000:(960000)) / train_audio@samp.rate
#Plot the wave
plot(timeArray, s1[10000:960000], type='l', col='black', xlab='Time (s)', ylab='Amplitude')
X.k <- fft(timeArray)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
clip1 <- system.file('audio2020-08-18-08_00_01.wav', package='av')
clip1_data <- read_audio_bin(clip1, channels = 1, end_time = 10.0)
clip1 <- system.file('audio2020-08-18-08_00_01.wav', package='av')
av_media_info(clip1)
clip1 <- system.file('muser-audio/audio2020-08-18-08_00_01.wav', package='av')
av_media_info(clip1)
clip1 <- system.file('muser-audio/audio2020-08-18-08_00_01.wav', package='av')
av_media_info(clip1)
clip1 <- system.file("muser-audio/audio2020-08-18-08_00_01.wav", package='av')
av_media_info(clip1)
clip1 <- system.file("muser-audio/audio2020-08-18-08_00_01.wav", package='av')
av_media_info(clip1)
clip1 <- system.file("~\audio2020-08-18-08_00_01.wav", package='av')
av_media_info(clip1)
clip1 <- system.file("~\audio2020-08-18-08_00_01.wav", package='av')
av_media_info(clip1)
?system.file
av_media_info(clip1)
clip1<-load.wave("audio2020-08-18-08_00_01.wav")
av_media_info(clip1)
clip1<-system.file("audio2020-08-18-08_00_01.wav")
av_media_info(clip1)
clip1<-system.file("audio2020-08-18-08_00_01.wav")
av_media_info(clip1)
clip1<-system.file("audio2020-08-18-08_00_01.wav")
av_media_info("audio2020-08-18-08_00_01.wav")
clip1 <- "audio2020-08-18-08_00_01.wav"
av_media_info(clip1)
clip1_data <- read_audio_bin(clip1, channels = 1, end_time = 10.0)
plot(clip1_data, type = 'l')
read_audio_bin()
?read_audio_bin
# Read 5 sec of data and directly transform to frequency
fft_data <- read_audio_fft(wonderland, end_time = 5.0)
# Read 5 sec of data and directly transform to frequency
fft_data <- read_audio_fft(clip1, end_time = 60.0)
dim(fft_data)
#> [1] 512 860
# Plot the spectrogram
plot(fft_data)
X.k <- fft(s1)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
s1
X.k
X.k <- fft(s1)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
plot.fourier <- function(fourier.series, f.0, ts) {
w <- 2*pi*f.0 trajectory <- sapply(ts, function(t) fourier.series(t,w))
ts
plot.fourier <- function(fourier.series, f.0, ts) {
w <- 2*pi*f.0
trajectory <- sapply(ts, function(t) fourier.series(t,w))
plot(ts, trajectory, type="l", xlab="time", ylab="f(t)")
abline(h=0,lty=3)
}
plot.fourier(x.k, 1/60, ts)
plot.fourier <- function(fourier.series, f.0, ts) {
w <- 2*pi*f.0
trajectory <- sapply(ts, function(t) fourier.series(t,w))
plot(ts, trajectory, type="l", xlab="time", ylab="f(t)")
abline(h=0,lty=3)
}
plot.fourier(X.k, 1/60, ts)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
x.k
X.k
dim(s1)
s1
plot(abs(X.k), type="h")
s1 <- train_audio@left
s1 <- s1 / 2^(train_audio@bit -1)
timeArray <- (20000:(960000)) / train_audio@samp.rate
#Plot the wave
plot(timeArray, s1[20000:960000], type='l', col='black', xlab='Time (s)', ylab='Amplitude')
s1 <- train_audio@left
s1 <- s1 / 2^(train_audio@bit -1)
timeArray <- (50000:(960000)) / train_audio@samp.rate
#Plot the wave
plot(timeArray, s1[50000:960000], type='l', col='black', xlab='Time (s)', ylab='Amplitude')
trunc_x <- fft(s1[50000:960000])                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(trunc_x, xlimits=c(0,length(trunc_x)))
plot(abs(trunc_x), type="h")
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
X.k <- fft(s1)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
a <- fft(c(4,0,0,0))
dim(a)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
X.k <- fft(s1)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot.dat
plot.data
view(plot.data)
View(plot.data)
View(plot.data)
length(plot.data[1,])
length(plot.data[,1])
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength", xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
plot.data[1:10000,]
length(plot.data[1:10000,])
dim(plot.data[1:10000,])
dim(plot.data[1:length(X.k)/2, ])
length(X.k)/2
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
xlimits=c(0,length(X.k))
half_n <- length(X.k)
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data[1:half_n, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength", xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
plot.data[1:half_n, ]
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
xlimits=c(0,length(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data[1:length(X.k), ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength", xlim=c(0, half_n), ylim=c(0,max(Mod(plot.data[,2]))))
plot.data[4000, ]
plot.data[2000, ]
plot.data[58000, ]
plot.data[1, ]
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
xlimits=c(0,length(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data[2:length(X.k), ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength", xlim=c(0, half_n), ylim=c(0,max(Mod(plot.data[,2]))))
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
xlimits=c(0,length(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data[2:length(X.k), ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength", xlim=c(0, half_n))
plot(plot.data[2:1000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength", xlim=c(0, half_n))
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
xlimits=c(0,length(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data[2:length(X.k), ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[2:1000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot.data[96000, ]
(Mod(X.k))
plot.data[2:length(X.k),2]
library(audio)
library(readr)
library(tuneR)
library(av)
adat<-load.wave("audio2020-08-18-08_00_01.wav")
# This is a stereo recording. Convert to mono for simplicity
y<-adat[1,] + adat[2,]
#path of file
file_audio_path <- "audio2020-08-18-08_00_01.wav"
#Read Files
train_audio = readWave(file_audio_path)
#Lets see the structure of the audio.
str(train_audio)
s1 <- train_audio@left
s1 <- s1 / 2^(train_audio@bit -1)
timeArray <- (50000:(960000)) / train_audio@samp.rate
#Plot the wave
plot(timeArray, s1[50000:960000], type='l', col='black', xlab='Time (s)', ylab='Amplitude')
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
X.k <- fft(s1)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
X.k <- fft(s1)                   # get amount of each frequency k
time     <- 60                            # measuring time interval (seconds)
acq.freq <- 16000                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
plot.frequency.spectrum(X.k, xlimits=c(0,length(X.k)))
magn <- Mod(X.k) # sqrt(Re(test)*Re(test)+Im(test)*Im(test))
phase <- Arg(X.k) # atan(Im(test)/Re(test))
# select only first half of vectors
magn.1 <- magn[1:(length(magn)/2)]
#phase.1 <- Arg(test)[1:(length(test)/2)]
# plot various vectors
# plot magnitudes as analyses by R
plot(magn,type="l")
# plot first half of magnitude vector
plot(magn.1,type="l")
# generate x-axis with frequencies
x.axis <- 1:length(magn.1)/time
# plot magnitudes against frequencies
plot(x=x.axis,y=magn.1,type="l")
x.axis
magn.1
magn <- Mod(X.k) # sqrt(Re(test)*Re(test)+Im(test)*Im(test))
phase <- Arg(X.k) # atan(Im(test)/Re(test))
# select only first half of vectors
magn.1 <- magn[1:(length(magn)/2)]
#phase.1 <- Arg(test)[1:(length(test)/2)]
# plot various vectors
# plot magnitudes as analyses by R
plot(magn,type="l")
# plot first half of magnitude vector
plot(magn.1,type="l")
# generate x-axis with frequencies
x.axis <- 1:length(magn.1)/time
# plot magnitudes against frequencies
plot(x=x.axis,y=magn.1,type="l")
magn <- Mod(X.k) # sqrt(Re(test)*Re(test)+Im(test)*Im(test))
phase <- Arg(X.k) # atan(Im(test)/Re(test))
# select only first half of vectors
magn.1 <- magn[1:(length(magn)/2)]
#phase.1 <- Arg(test)[1:(length(test)/2)]
# plot various vectors
# plot magnitudes as analyses by R
plot(magn,type="l")
# plot first half of magnitude vector
plot(magn.1,type="l")
# generate x-axis with frequencies
x.axis <- 1:length(magn.1)/time
# plot magnitudes against frequencies
plot(x=x.axis,y=magn.1,type="l")
x.axis
plot(plot.data[2:1000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[95000:96000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[80000:96000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[50000:96000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[20000:96000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[5000:96000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
plot(plot.data[600:96000, ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
max(x.axis)
# generate x-axis with frequencies
x.axis <- 1:length(X.k)/time
plot.data  <- cbind(x.axis, Mod(X.k))
xlimits=c(0,length(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data[2:length(X.k), ], t="h", lwd=2, main="", xlab="Frequency (Hz)", ylab="Strength")
